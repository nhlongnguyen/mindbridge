version: '3.8'

services:
  # Main application
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mindbridge}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-mindbridge}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app/src
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./migrations:/app/migrations
      - ./alembic.ini:/app/alembic.ini
    networks:
      - mindbridge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery worker
  worker:
    build: .
    command: celery -A mindbridge.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mindbridge}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-mindbridge}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app/src
    networks:
      - mindbridge-network

  # Celery beat scheduler
  beat:
    build: .
    command: celery -A mindbridge.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mindbridge}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-mindbridge}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app/src
    networks:
      - mindbridge-network

  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mindbridge}
      - POSTGRES_USER=${POSTGRES_USER:-mindbridge}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - mindbridge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mindbridge} -d ${POSTGRES_DB:-mindbridge}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "requirepass $${REDIS_PASSWORD}" > /usr/local/etc/redis/redis.conf &&
        echo "maxmemory 256mb" >> /usr/local/etc/redis/redis.conf &&
        echo "maxmemory-policy allkeys-lru" >> /usr/local/etc/redis/redis.conf &&
        redis-server /usr/local/etc/redis/redis.conf
      '
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - mindbridge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Optional: Redis Insight for debugging
  redis-insight:
    image: redislabs/redisinsight:latest
    depends_on:
      - redis
    networks:
      - mindbridge-network

volumes:
  postgres_data:
  redis_data:

networks:
  mindbridge-network:
    driver: bridge
