name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.7.1"

jobs:
  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --with dev,test

    - name: Run pre-commit hooks
      run: poetry run pre-commit run --all-files

  tests:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [pre-commit]

    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD || 'testpassword' }}
          POSTGRES_DB: mindbridge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --with dev,test

    - name: Run Database Migrations
      env:
        DATABASE_URL: postgresql://postgres:${{ secrets.TEST_DB_PASSWORD || 'testpassword' }}@localhost:5432/mindbridge_test
        ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:8080"
        ENVIRONMENT: test
        LOG_LEVEL: INFO
      run: |
        echo "üóÑÔ∏è Running database migrations..."
        poetry run alembic upgrade head
        echo "‚úÖ Verifying migration status..."
        poetry run alembic current
        echo "üéâ Database migrations completed successfully!"

    - name: Run tests with coverage
      env:
        # Database Configuration
        DATABASE_URL: postgresql://postgres:${{ secrets.TEST_DB_PASSWORD || 'testpassword' }}@localhost:5432/mindbridge_test

        # Redis Configuration
        REDIS_URL: redis://localhost:6379/0

        # JWT Configuration
        JWT_SECRET_KEY: ${{ secrets.TEST_JWT_SECRET || 'test-secret-key-for-ci' }}
        JWT_ALGORITHM: HS256
        JWT_EXPIRE_MINUTES: 30

        # Application Configuration
        ENVIRONMENT: test
        DEBUG: false
        LOG_LEVEL: INFO

        # Embedding Model Configuration
        EMBEDDING_MODEL: sentence-transformers/all-MiniLM-L6-v2
        EMBEDDING_DIMENSION: 384

        # Celery Configuration
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0

        # API Configuration
        API_V1_PREFIX: /api/v1
        API_TITLE: Mindbridge API
        API_VERSION: 0.1.0

        # Security Configuration
        ALLOWED_HOSTS: localhost,127.0.0.1
        ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:8080"

        # Monitoring Configuration
        OPENTELEMETRY_ENABLED: false
        OTEL_SERVICE_NAME: mindbridge
        OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4317
      run: poetry run pytest --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5.4.3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-deploy:
    name: Build and Deploy to Staging
    runs-on: ubuntu-latest
    needs: [tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4.6.2
      with:
        name: dist
        path: dist/

    # TODO: Add actual deployment steps once infrastructure is ready
    - name: Deploy to staging (placeholder)
      run: |
        echo "Deployment to staging would happen here"
        echo "Build version: $(poetry version -s)"
        echo "Commit SHA: ${{ github.sha }}"
