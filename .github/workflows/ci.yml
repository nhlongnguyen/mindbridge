name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.7.1"

jobs:
  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      
    - name: Set up Python
      uses: actions/setup-python@v5.1.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache dependencies
      uses: actions/cache@v4.0.2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      run: poetry install --with dev,test
      
    - name: Run pre-commit hooks
      run: poetry run pre-commit run --all-files

  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      
    - name: Set up Python
      uses: actions/setup-python@v5.1.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache dependencies
      uses: actions/cache@v4.0.2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      run: poetry install --with dev,test
      
    - name: Run ruff linting
      run: poetry run ruff check src/ tests/
      
    - name: Run ruff formatting check
      run: poetry run ruff format --check src/ tests/
      
    - name: Run black formatting check
      run: poetry run black --check src/ tests/
      
    - name: Run mypy type checking
      run: poetry run mypy src/
      
    - name: Run bandit security check
      run: poetry run bandit -r src/
      
    - name: Run safety dependency check
      run: poetry run safety check

  tests:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [pre-commit, quality-checks]
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD || 'testpassword' }}
          POSTGRES_DB: mindbridge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      
    - name: Set up Python
      uses: actions/setup-python@v5.1.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache dependencies
      uses: actions/cache@v4.0.2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      run: poetry install --with dev,test
      
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:${{ secrets.TEST_DB_PASSWORD || 'testpassword' }}@localhost:5432/mindbridge_test
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: ${{ secrets.TEST_JWT_SECRET || 'test-secret-key-for-ci' }}
      run: poetry run pytest --cov-report=xml
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4.5.0
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build and Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      
    - name: Set up Python
      uses: actions/setup-python@v5.1.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Build package
      run: poetry build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4.3.3
      with:
        name: dist
        path: dist/
        
    # TODO: Add actual deployment steps once infrastructure is ready
    - name: Deploy to staging (placeholder)
      run: |
        echo "Deployment to staging would happen here"
        echo "Build version: $(poetry version -s)"
        echo "Commit SHA: ${{ github.sha }}"